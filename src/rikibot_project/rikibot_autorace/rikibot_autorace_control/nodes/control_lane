#!/usr/bin/env python
import math
from std_msgs.msg import String
import cv2
import numpy as np
import rospy
from geometry_msgs.msg import Twist
from std_msgs.msg import Float64
from sensor_msgs.msg import CompressedImage
from cv_bridge import CvBridge, CvBridgeError
from sensor_msgs.msg import Image
from nav_msgs.msg import Odometry

def callback(x):
    pass

def sign(num):
    if num > 0:
        return 1
    else:
        return -1

def distance_dot2line(a, b, c, x0, y0):
    distance = abs(x0*a + y0*b + c)/math.sqrt(a*a + b*b)
    sign_ = sign(x0*a + y0*b + c) * sign(a)
    return sign_, distance

def distance_dot2dot(point1, point2):
    return math.sqrt((point2[1] - point1[1]) * (point2[1] - point1[1]) + (point2[0] - point1[0]) * (point2[0] - point1[0]))

def centroid(arr, low_point, col_start, col_end):
    count = 0
    center_low = 0
    center_col = 0

    for i in range(col_start,col_end):
        if arr[low_point][i] == 255:
            center_col = center_col + i
            count = count + 1
        i += 4

    center_low = low_point
    center_col = center_col / count
    return center_low, center_col



class Lane_tracer():
    def __init__(self):

        self.selecting_sub_image = "raw"  # you can choose image type "compressed", "raw"
        self.pub_image_type = "compressed"
        self.ctrl_theta = rospy.get_param("~ctrl_theta", 0.024)


        # subscribers
        if self.selecting_sub_image == "compressed":
            self._sub_1 = rospy.Subscriber('/image_lane_compressed', CompressedImage, self.callback, queue_size=1)
        else:
            self._sub_1 = rospy.Subscriber('/image_lane', Image, self.callback, queue_size=1)
        # publishers

        self.sub_max_vel = rospy.Subscriber('/control/max_vel', Float64, self.cbGetMaxVel, queue_size = 1)

        self._pub = rospy.Publisher('/cmd_vel', Twist, queue_size=1)

        self._cv_bridge = CvBridge()

        self.lane_position = 0
        self.lane_existance = 'yes'
        self.MAX_VEL = 0.2
        self.vel = Twist()

    def cbGetMaxVel(self, max_vel_msg):
        self.MAX_VEL = max_vel_msg.data

    def PIDcontrol(self, x0, y0, x1, y1, x2, y2):
        Ip = 0.2
        distance = 350
        if x1 != x2:
            a = (float(y2)-float(y1))/(float(x2)-float(x1))
        else:
            a = (float(y2)-float(y1))/1
        b = -1
        c = -a*x1 + y1
        theta_current = -math.atan(1/a)*180/np.pi
        sign_, err = distance_dot2line(a, b, c, x0, y0)
        theta_desired = (err - distance) * Ip * sign_
        theta_wheel = (theta_desired - theta_current) * self.ctrl_theta * self.MAX_VEL # origin : 0.005 next : 0.007
        #theta_wheel = (theta_desired - theta_current) * 0.04 * self.MAX_VEL # origin : 0.005 next : 0.007
        return sign_, theta_wheel

    def callback(self, image_msg):
        if self.selecting_sub_image == "compressed":
            np_arr = np.fromstring(image_msg.data, np.uint8)
            cv_image = cv2.imdecode(np_arr, cv2.IMREAD_GRAYSCALE)
        else:
            cv_image = self._cv_bridge.imgmsg_to_cv2(image_msg, "mono8")

        # setting desired path line
        low_point1 = 599

        while(1):
            try:
                _, col_point1 =  centroid(cv_image, low_point1, 300, cv_image.shape[1])
                break
            except Exception as e:
                if low_point1 < 200:
                    self.lane_existance = 'no'
                    break
                else:
                    low_point1 -= 50

        low_point2 = low_point1 - 50
        while (1):
            try:
                _, col_point2 = centroid(cv_image, low_point2, 300, cv_image.shape[1])
                self.lane_existance = 'yes'
                break
            except Exception as e:
                if low_point2 < 150:
                    self.lane_existance = 'no'
                    break
                else:
                    low_point2 -= 50

        if self.lane_existance == 'no':
            print "no lane"
            # showing binary and original images
            angular_z = self.lane_position * self.MAX_VEL * 1.6
            linear_x = self.MAX_VEL 

            self.publishing_vel(angular_z, linear_x)
            return

        # drawing desired path using point1, point2
        #rospy.loginfo("col_point1:%d", col_point1)

        # setting and drawing current position
        low_position = (low_point1 + low_point2)/2
        col_position = 500
        # setting cmd_vel using PID control function
        self.lane_position, angular_z = self.PIDcontrol(col_position, low_position, col_point1, low_point1, col_point2, low_point2)
        #rospy.loginfo("position: %f, angular_z: %f", self.lane_position, angular_z)

        self.publishing_vel(angular_z, self.MAX_VEL)

    def publishing_vel(self, angular_z, linear_x):
        self.vel.angular.z = angular_z
        self.vel.linear.x = linear_x
        self._pub.publish(self.vel)


    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('lane_follower')
    node = Lane_tracer()
    node.main()
