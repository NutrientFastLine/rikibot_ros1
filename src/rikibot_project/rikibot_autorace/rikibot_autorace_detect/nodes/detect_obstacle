#!/usr/bin/env python
# -*- coding: utf-8 -*-

################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# Author: Leon Jung, Gilbert

import rospy
import numpy as np
import math
import os
import cv2
from sensor_msgs.msg import LaserScan
from std_msgs.msg import UInt8, Float64, Bool


class DetectObstacle():
    def __init__(self):

        self.obstacle_distance = rospy.get_param("~detect_distance", 0.5)
        self.debug_mode = rospy.get_param("~debug_mode", False)
        self.sub_scan = rospy.Subscriber('/scan', LaserScan, self.FindObstacle, queue_size=1)
        
        if self.debug_mode is True:
            self.pub_max_vel = rospy.Publisher('/control/max_vel', Float64, queue_size = 1)
        else:
            self.pub_obstacle = rospy.Publisher('/detect/obstacle', Bool, queue_size = 1)
            

    def FindObstacle(self, scan):
        angle_scan = 15
        scan_start = 180 - angle_scan
        scan_end = 180 + angle_scan
        obstacle_existence = 'no'
        obstacle_count = 0
        for i in range(scan_start, scan_end):
            if scan.ranges[i] < self.obstacle_distance and scan.ranges[i] > 0.01:
                obstacle_count = obstacle_count + 1

        if obstacle_count > 5 :
            if self.debug_mode is True:
                msg_pub_max_vel = Float64()
                msg_pub_max_vel.data = 0.0
                self.pub_max_vel.publish(msg_pub_max_vel)
                #obstacle_existence = 'yes'
            else:
                msg_pub_obstacle = Bool()
                msg_pub_obstacle.data = True
                self.pub_obstacle.publish(msg_pub_obstacle)
                #obstacle_existence = 'yes'
        else :
            if self.debug_mode is True:
                msg_pub_max_vel = Float64()
                msg_pub_max_vel.data = 0.2
                self.pub_max_vel.publish(msg_pub_max_vel)
            else:
                msg_pub_obstacle = Bool()
                msg_pub_obstacle.data = False
                self.pub_obstacle.publish(msg_pub_obstacle)
                
        #print obstacle_count, obstacle_existence


    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('detect_obstacle')
    node = DetectObstacle()
    node.main()



















